import asyncio
from datetime import datetime
import logging
import os
import sys

from aiogram import Bot, Dispatcher, types
from aiogram import Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage

from app.database import SessionLocal
from app.models.Employee import Employee
from app.models.Request import Request
from app.models.Supplier import Supplier

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

logging.basicConfig(level=logging.INFO)
API_TOKEN = '8011092603:AAGDvX5_WHCu6JuDyIVDOys6JqKfj_OcZRg'

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()


async def restart_bot():
    python = sys.executable
    os.execl(python, python, *sys.argv)


@router.message(Command("start"))
async def send_welcome(message: types.Message):
    welcome_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É.\n" \
                   "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞–∂–º–∏—Ç–µ /command."
    await message.answer(welcome_text)


@router.message(Command("command"))
async def send_command(message: types.Message):
    command_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞.
    /command - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.
    /register_employee - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
    /register_supplier - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —é—Ä. –ª–∏—Ü–∞, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
    /create_request - –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: 
            –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, ID —Ç–∏–ø–∞ –º–∞—à–∏–Ω—ã, ID —Ç–∏–ø–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏, –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    /request_suggestion - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É.
    """
    await message.answer(command_text)


@router.message(Command("register_employee"))
async def register_employee(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –∏ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, 123456789).")


@router.message(Command("register_supplier"))
async def register_supplier(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Æ—Ä. –õ–∏—Ü–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –≤–∞—à ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û–û–û –†–æ–º–∞—à–∫–∞, 89001234567, 123456789).")


@router.message(Command("request_suggestion"))
async def request_suggestion(message: types.Message):
    async with SessionLocal() as session:
        suggestions = await session.execute("SELECT * FROM request_suggestions")
        suggestions_list = suggestions.fetchall()
        if suggestions_list:
            response_text = "–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞—è–≤–æ–∫:\n"
            for suggestion in suggestions_list:
                response_text += f"{suggestion.departure} -> {suggestion.destination}, –¢–∏–ø –º–∞—à–∏–Ω—ã: {suggestion.truck_type_id}, –¢–∏–ø —Å–∫–æ—Ä–æ—Å—Ç–∏: {suggestion.speed_type_id}, –î–∞—Ç–∞: {suggestion.start_shipping_date}\n"
        else:
            response_text = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
        await message.answer(response_text)


@router.message(lambda message: message.text.startswith("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è,"))
async def process_registration(message: types.Message):
    data = message.text.split(',')
    if len(data) == 3:
        name, telegram_id = data[0].strip(), data[1].strip()
        async with SessionLocal() as session:
            new_employee = Employee(name=name, telegram_id=telegram_id)
            session.add(new_employee)
            await session.commit()
            await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    elif len(data) == 4:
        legal_name, phone_number, telegram_id = data[0].strip(), data[1].strip(), data[2].strip()
        async with SessionLocal() as session:
            new_supplier = Supplier(legal_name=legal_name, phone_number=phone_number, telegram_id=telegram_id)
            session.add(new_supplier)
            await session.commit()
            await message.answer(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ {legal_name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞—é—Ç—Å—è 2 –∏–ª–∏ 3 –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")

@router.message(Command("create_request"))
async def create_request(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, 1, 1, 2025-04-01 12:00:00, 123456789).")

@router.message(lambda message: message.text.startswith("–ó–∞—è–≤–∫–∞,"))
async def process_request(message: types.Message):
    data = [part.strip() for part in message.text[7:].split(',')]
    logging.info(f"–î–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data}")

    if len(data) != 6:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç–æ–π –∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ."
        )
        return

    try:
        origin, destination, truck_type_id, speed_type_id, start_date, employee_id = (
            data[0],
            data[1],
            int(data[2]),
            int(data[3]),
            data[4],
            int(data[5])
        )

        try:
            start_date = datetime.strptime(start_date, '%Y-%m-%d %H:%M:%S')
        except ValueError:
            try:
                start_date = datetime.strptime(start_date, '%Y-%m-%d')
            except ValueError:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã {start_date}")
                await message.answer(
                    "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM:SS –∏–ª–∏ YYYY-MM-DD."
                )
                return

        chat_id = message.chat.id
        message_id = message.message_id

        message_link = f"https://t.me/c/{str(chat_id).replace('-100', '')}/{message_id}"

        async with SessionLocal() as session:
            new_request = Request(
                origin=origin,
                destination=destination,
                truck_type_id=truck_type_id,
                speed_type_id=speed_type_id,
                created_at=datetime.utcnow(),
                start_date=start_date,
                employee_id=employee_id,
                telegram_message_link=message_link
            )
            session.add(new_request)
            await session.commit()

            await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É –∏–∑ {origin} –≤ {destination} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\nüìå [–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]({message_link})", parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}")


@router.message(Command("restart"))
async def restart(message: types.Message):
    await message.answer("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    await restart_bot()


async def main():
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
